describe("test", function()
  describe("assert", function()
    describe("equal", function()
      it("should test equality in lua", function()
        assert.equal(1,1)
        assert.equal(4,4,4,4)
        assert.equal(2.4, 2.4)
        assert.equal("test", "test")
        assert.equal(true, true)
        assert.equal(false, false)
        assert.equal({1,2,3}, {1,2,3})
        assert.equal({1,{"z","a"},3}, {1,{"z","a"},3})
      end)

      struct BazIt { i : int }
      it("should test equality in terra", terra()
        var a = BazIt{1}
        var b = BazIt{1}
        assert.equal(a,b)
        assert.equal(1,1)
        assert.equal(4ULL,4U,4,4)
        assert.equal(2.4, 2.4)
        assert.equal("test", "test")
        assert.equal(true, true)
        assert.equal(false, false)
        var p : rawstring = nil
        assert.equal(p, nil)
        --assert.equal({1,{"z","a"},3}, {1,{"z","a"},3})
        --assert.equal({1,2,3}, {1,2,3})
      end)
    end)
    
    describe("unique", function()
      it("should succeed if all elements are different in lua", function()
        assert.unique(1,2)
        assert.unique(-1,-2,3,4)
        assert.unique(1,"test", 3.2, true)
        assert.unique(true, false)
        assert.unique("test", nil)
        assert.unique({1,2,3}, 3, {2,3}, {3, 2, 1})
        assert.unique({1,{"a", 3},3}, {1, {"a", "z"}, 3})
        assert.unique({1,{"a", 3},3}, {1, {"a", 2}, 3})
      end)
    end)
    
    describe("is_true", function()
      it("should only succeed for boolean true values in lua", function()
        assert.is_true(true)
        assert.fail(function() assert.is_true(1.0) end)
        assert.fail(function() assert.is_true(0) end)
        assert.fail(function() assert.is_true(nil) end)
        assert.fail(function() assert.is_true(false) end)
      end)

      it("is_true should only succeed for boolean true values in terra", terra()
        assert.is_true(true)
        -- assert.is_true(1.0) 
      end)
    end)

    describe("is_false", function()
      it("should only succeed for boolean false values in lua", function()
        assert.is_false(false)
        assert.fail(function() assert.is_false(1.0) end)
        assert.fail(function() assert.is_false(0) end)
        assert.fail(function() assert.is_false(nil) end)
        assert.fail(function() assert.is_false(true) end)
      end)

      it("should only succeed for boolean false values in terra", terra()
        assert.is_false(false)
        -- assert.fail(function() assert.is_false(1.0) end)
      end)
    end)
    
    describe("truthy", function()
      it("should succeed for all values that lua considers true", function()
        assert.truthy(1)
        assert.truthy(987345)
        assert.truthy(true)
        assert.truthy(1.0)
        assert.truthy("a")
        assert.truthy(0)
        assert.truthy(0.0)
        assert.truthy({0})
        assert.fail(function() assert.truthy(nil) end)
        assert.fail(function() assert.truthy(false) end)
      end)

      it("should succeed for all values that cast to boolean true values in terra", terra()
        assert.truthy(1)
        assert.truthy(true)
        assert.truthy(1.0)
      end)
    end)

    describe("falsy", function()
      it("should succeed only for false and nil in lua", function()
        assert.fail(function() assert.falsy(1) end)
        assert.fail(function() assert.falsy(987345) end)
        assert.fail(function() assert.falsy(true) end)
        assert.fail(function() assert.falsy(1.0) end)
        assert.fail(function() assert.falsy("a") end)
        assert.fail(function() assert.falsy(0) end)
        assert.fail(function() assert.falsy(0.0) end)
        assert.fail(function() assert.falsy({0}) end)
        assert.falsy(nil)
        assert.falsy(false)
      end)

      it("should succeed for all values that cast to boolean false values in terra", terra()
        assert.falsy(false)
        assert.falsy(0)
        assert.falsy(0.0)
      end)
    end)

    it("should test success in lua", function()
      assert.success(function() return 1 end)
      assert.success(function() end)
      assert.success(function() return nil end)
      assert.success(function() assert.truthy(true) end)
    end)

    it("should test failure in lua", function()
      assert.fail(function() error("blah") end)
      assert.fail(function() error("blah") end, debug.getinfo(1).short_src .. ":" .. tostring(debug.getinfo(1).currentline) .. ": blah")
      assert.fail(function() error({1}) end)
      assert.fail(function() error({1}) end, {1})
      assert.fail(function() assert.falsy(true) end)
      assert.fail(function() assert.fail(function() end) end)
    end)

    it("should test float nearness", function()
      assert.near(0.0000001, 0.0000002)
      assert.near(-0.0000001, -0.0000002)
      assert.near(0.0000001, -0.0000002)
      assert.fail(function() assert.near(0.00001, 0.00002) end)
      assert.fail(function() assert.near(-0.00001, 0.00002) end)
      assert.fail(function() assert.near(-0.00001, -0.00002) end)
    end)

    it("should test float nearness", terra()
      assert.near(0.0000001, 0.0000002)
      assert.near(-0.0000001, -0.0000002)
      assert.near(0.0000001, -0.0000002)
    end)
  end)
end)