local FS = require 'std.fs'
local O = require 'std.object'
local C = terralib.includecstring [[#include <string.h>]]

describe("filesystem", function()
  describe("path object", function()
    it("should have a default constructor", terra()
      var s : FS.path
      O.new(s)
      assert.equal(s.s, nil)
    end)
    it("should have a string copy constructor", terra()
      var s : FS.path
      O.new(s, "test")
      assert.equal(C.strcmp(s.s, "test"), 0)
    end)
    it("should concat properly", terra()
      var s = O.new(FS.path, "foo")
      assert.equal(C.strcmp(s:concat("bar").s, "foobar"), 0)
    end)
    it("should append properly", terra()
      var s = O.new(FS.path, "foo")
      assert.equal(C.strcmp(s:append("bar").s, "foo/bar"), 0)
      assert.equal(C.strcmp(s:append("/bar").s, "foo/bar"), 0)
      assert.equal(C.strcmp(s:append("/bar/").s, "foo/bar"), 0)
    end)
    it("should be convertible to rawstring", terra()
      var s : rawstring = O.new(FS.path, "foobars")
      assert.equal(C.strcmp(s, "foobars"), 0)
    end)
    it("can be concatenated", terra()
      var s = O.new(FS.path, "foo") + "bar" + "s" + O.new(FS.path, "!")
      assert.equal(C.strcmp(s.s, "foobars!"), 0)
    end)
    it("can append path segments", terra()
      var s = O.new(FS.path, "foo") / "bar" / "/s" / O.new(FS.path, "//!/")
      assert.equal(C.strcmp(s.s, "foo/bar/s/!"), 0)
    end)
    it("should handle absolute paths", terra()
      var a = O.new(FS.path, "/foo/")
      var r = O.new(FS.path, "foo/")
      assert.is_true(a:is_absolute())
      assert.is_false(a:is_relative())
      assert.is_false(r:is_absolute())
      assert.is_true(r:is_relative())
      var b = O.new(FS.path, "D:\\foo")
      assert.is_true(b:is_absolute())
      assert.is_false(b:is_relative())
      var c = O.new(FS.path, "D:/foo")
      assert.is_true(c:is_absolute())
      assert.is_false(c:is_relative())

    end)
    it("can be compared with other paths", terra()
      var empty = O.new(FS.path)
      assert.is_true(empty == empty)
      assert.is_false(empty ~= empty)
      assert.is_false(empty == "")
      assert.is_true(empty ~= "")
      assert.is_true(O.new(FS.path, "foo") == "foo")
      assert.is_false(O.new(FS.path, "foo") == "food")
      assert.is_true(O.new(FS.path, "foo") == O.new(FS.path, "foo"))
      assert.is_false(O.new(FS.path, "foo") == O.new(FS.path, "food"))
      assert.is_true("foo" == O.new(FS.path, "foo"))
      assert.is_false("foo" == O.new(FS.path, "food"))
      assert.is_true(O.new(FS.path, "foo") ~= "food")
      assert.is_false(O.new(FS.path, "foo") < "fo")
      assert.is_false(O.new(FS.path, "foo") < "foo")
      assert.is_true(O.new(FS.path, "foo") < "food")
      assert.is_false(O.new(FS.path, "foo") <= "fo")
      assert.is_true(O.new(FS.path, "foo") <= "foo")
      assert.is_true(O.new(FS.path, "foo") <= "food")
      assert.is_true(O.new(FS.path, "foo") > "fo")
      assert.is_false(O.new(FS.path, "foo") > "foo")
      assert.is_false(O.new(FS.path, "foo") > "food")
      assert.is_true(O.new(FS.path, "foo") >= "fo")
      assert.is_true(O.new(FS.path, "foo") >= "foo")
      assert.is_false(O.new(FS.path, "foo") >= "food")
    end)
  end)
  it("should get and set the current directory", terra()
    var old = FS.currentdir()
    assert.unique(old.s, nil)
    assert.is_true(FS.chdir(ROOT_DIR))
    assert.is_true(FS.exists("fs_spec.t", false))
    assert.is_true(FS.chdir(old))
  end)
  it("should create and destroy directories", terra()
    assert.is_false(FS.exists("FOOBAR_TEST", true))
    assert.is_true(FS.mkdir("FOOBAR_TEST"))
    -- Wati for folder to actually be created
    while not FS.exists("FOOBAR_TEST", true) do end
    assert.is_true(FS.rmdir("FOOBAR_TEST"))
    -- Wati for folder to actually be removed
    while FS.exists("FOOBAR_TEST", true) do end
  end)
  it("should get file or folder attributes", terra()
    var s = O.new(FS.path, ROOT_DIR) / "fs_spec.t"
    
    var a = FS.attributes(s)
    assert.is_true(a.exists)
    assert.is_false(a.folder)
    assert.is_false(a.symlink)
    assert.unique(a.size, 0)
    assert.unique(a.lastwrite, 0)
    assert.unique(a.lastaccess, 0)

    var d = FS.attributes(ROOT_DIR)
    assert.is_true(d.exists)
    assert.is_true(d.folder)
    assert.is_false(d.symlink)
    --assert.equal(d.size, 0) -- this is inconsistent on folders
    assert.unique(d.lastwrite, 0)
    assert.unique(d.lastaccess, 0)

    var x = FS.attributes("invalid@@@@")
    assert.is_false(x.exists)
  end)
  it("should iterate through a directory", terra()
    var count = 0

    for i in FS.dir(ROOT_DIR) do
      assert.unique(i.filename[0], 0)
      count = count + 1
    end
    assert.is_true(count > 1)
  end)
end)
  
